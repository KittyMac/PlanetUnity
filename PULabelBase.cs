

//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class PULabel : PULabelBase {
	
	public PULabel()
	{
		string attr;

		attr = "12";
		if(attr != null) { fontSize = int.Parse(attr); fontSizeExists = true; } 
		attr = "center";
		if(attr != null) { alignment = (PlanetUnity.LabelAlignment)System.Enum.Parse(typeof(PlanetUnity.LabelAlignment), attr); alignmentExists = true; } 
		attr = "0,0,0,1";
		if(attr != null) { textColor = attr; textColorExists = true; } 

	}
	
	
	public PULabel(
			string shader,
			string font,
			int fontSize,
			PlanetUnity.LabelAlignment alignment,
			cColor textColor,
			string value,
			cVector2 shadowOffset,
			cColor shadowColor,
			cRect bounds ) : this()
	{
		this.shader = shader;
		this.shaderExists = true;

		this.font = font;
		this.fontExists = true;

		this.fontSize = fontSize;
		this.fontSizeExists = true;

		this.alignment = alignment;
		this.alignmentExists = true;

		this.textColor = textColor;
		this.textColorExists = true;

		this.value = value;
		this.valueExists = true;

		this.shadowOffset = shadowOffset;
		this.shadowOffsetExists = true;

		this.shadowColor = shadowColor;
		this.shadowColorExists = true;

		this.bounds = bounds;
		this.boundsExists = true;
	}

	
	
	public PULabel(
			string shader,
			string font,
			int fontSize,
			PlanetUnity.LabelAlignment alignment,
			cColor textColor,
			string value,
			cVector2 shadowOffset,
			cColor shadowColor,
			cRect bounds,
			cVector3 rotation,
			bool hidden,
			float lastY,
			float lastX,
			int renderQueueOffset,
			bool clipDepth,
			bool clipStencil,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.shader = shader;
		this.shaderExists = true;

		this.font = font;
		this.fontExists = true;

		this.fontSize = fontSize;
		this.fontSizeExists = true;

		this.alignment = alignment;
		this.alignmentExists = true;

		this.textColor = textColor;
		this.textColorExists = true;

		this.value = value;
		this.valueExists = true;

		this.shadowOffset = shadowOffset;
		this.shadowOffsetExists = true;

		this.shadowColor = shadowColor;
		this.shadowColorExists = true;

		this.bounds = bounds;
		this.boundsExists = true;

		this.rotation = rotation;
		this.rotationExists = true;

		this.hidden = hidden;
		this.hiddenExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.renderQueueOffset = renderQueueOffset;
		this.renderQueueOffsetExists = true;

		this.clipDepth = clipDepth;
		this.clipDepthExists = true;

		this.clipStencil = clipStencil;
		this.clipStencilExists = true;

		this.title = title;
		this.titleExists = true;

		this.tag = tag;
		this.tagExists = true;

		this.tag1 = tag1;
		this.tag1Exists = true;

		this.tag2 = tag2;
		this.tag2Exists = true;

		this.tag3 = tag3;
		this.tag3Exists = true;

		this.tag4 = tag4;
		this.tag4Exists = true;

		this.tag5 = tag5;
		this.tag5Exists = true;

		this.tag6 = tag6;
		this.tag6Exists = true;
	}


}




public class PULabelBase : PUGameObject {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);




	// XML Attributes
	public string shader;
	public bool shaderExists;

	public string font;
	public bool fontExists;

	public int fontSize;
	public bool fontSizeExists;

	public PlanetUnity.LabelAlignment alignment;
	public bool alignmentExists;

	public cColor textColor;
	public bool textColorExists;

	public string value;
	public bool valueExists;

	public cVector2 shadowOffset;
	public bool shadowOffsetExists;

	public cColor shadowColor;
	public bool shadowColorExists;




	
	public void SetShader(string v) { shader = v; shaderExists = true; } 
	public void SetFont(string v) { font = v; fontExists = true; } 
	public void SetFontSize(int v) { fontSize = v; fontSizeExists = true; } 
	public void SetAlignment(PlanetUnity.LabelAlignment v) { alignment = v; alignmentExists = true; } 
	public void SetTextColor(cColor v) { textColor = v; textColorExists = true; } 
	public void SetValue(string v) { value = v; valueExists = true; } 
	public void SetShadowOffset(cVector2 v) { shadowOffset = v; shadowOffsetExists = true; } 
	public void SetShadowColor(cColor v) { shadowColor = v; shadowColorExists = true; } 


	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("Label");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("LabelExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("Labels");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("GameObjects");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public override void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{
		base.gaxb_load(reader, _parent, args);

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( PULabel ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("shader");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { shader = attr; shaderExists = true; } 
		
		attr = reader.GetAttribute("font");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { font = attr; fontExists = true; } 
		
		attr = reader.GetAttribute("fontSize");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "12"; }
		if(attr != null) { fontSize = int.Parse(attr); fontSizeExists = true; } 
		
		attr = reader.GetAttribute("alignment");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "center"; }
		if(attr != null) { alignment = (PlanetUnity.LabelAlignment)System.Enum.Parse(typeof(PlanetUnity.LabelAlignment), attr); alignmentExists = true; } 
		
		attr = reader.GetAttribute("textColor");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "0,0,0,1"; }
		if(attr != null) { textColor = attr; textColorExists = true; } 
		
		attr = reader.GetAttribute("value");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { value = attr; valueExists = true; } 
		
		attr = reader.GetAttribute("shadowOffset");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { shadowOffset = attr; shadowOffsetExists = true; } 
		
		attr = reader.GetAttribute("shadowColor");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { shadowColor = attr; shadowColorExists = true; } 
		

	}
	
	
	
	
	
	
	
	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(shaderExists) { sb.AppendFormat (" {0}=\"{1}\"", "shader", shader); }
		if(fontExists) { sb.AppendFormat (" {0}=\"{1}\"", "font", font); }
		if(fontSizeExists) { sb.AppendFormat (" {0}=\"{1}\"", "fontSize", fontSize); }
		if(alignmentExists) { sb.AppendFormat (" {0}=\"{1}\"", "alignment", (int)alignment); }
		if(textColorExists) { sb.AppendFormat (" {0}=\"{1}\"", "textColor", textColor); }
		if(valueExists) { sb.AppendFormat (" {0}=\"{1}\"", "value", value); }
		if(shadowOffsetExists) { sb.AppendFormat (" {0}=\"{1}\"", "shadowOffset", shadowOffset); }
		if(shadowColorExists) { sb.AppendFormat (" {0}=\"{1}\"", "shadowColor", shadowColor); }

	}
	
	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}
	
	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "Label");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "Label");
		}
	}
}
