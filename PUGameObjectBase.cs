

//
// Autogenerated by gaxb ( https://github.com/SmallPlanet/gaxb )
//

using System;
using System.Xml;
using System.Text;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;


public partial class PUGameObject : PUGameObjectBase {
	
	public PUGameObject()
	{
		string attr;

		attr = "false";
		if(attr != null) { clipDepth = bool.Parse(attr); clipDepthExists = true; } 
		attr = "false";
		if(attr != null) { clipStencil = bool.Parse(attr); clipStencilExists = true; } 

	}
	
	
	public PUGameObject(
			cRect bounds,
			bool hidden,
			float lastY,
			float lastX,
			int renderQueueOffset,
			bool clipDepth,
			bool clipStencil ) : this()
	{
		this.bounds = bounds;
		this.boundsExists = true;

		this.hidden = hidden;
		this.hiddenExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.renderQueueOffset = renderQueueOffset;
		this.renderQueueOffsetExists = true;

		this.clipDepth = clipDepth;
		this.clipDepthExists = true;

		this.clipStencil = clipStencil;
		this.clipStencilExists = true;
	}

	
	
	public PUGameObject(
			cRect bounds,
			bool hidden,
			float lastY,
			float lastX,
			int renderQueueOffset,
			bool clipDepth,
			bool clipStencil,
			string title,
			string tag,
			string tag1,
			string tag2,
			string tag3,
			string tag4,
			string tag5,
			string tag6 ) : this()
	{
		this.bounds = bounds;
		this.boundsExists = true;

		this.hidden = hidden;
		this.hiddenExists = true;

		this.lastY = lastY;
		this.lastYExists = true;

		this.lastX = lastX;
		this.lastXExists = true;

		this.renderQueueOffset = renderQueueOffset;
		this.renderQueueOffsetExists = true;

		this.clipDepth = clipDepth;
		this.clipDepthExists = true;

		this.clipStencil = clipStencil;
		this.clipStencilExists = true;

		this.title = title;
		this.titleExists = true;

		this.tag = tag;
		this.tagExists = true;

		this.tag1 = tag1;
		this.tag1Exists = true;

		this.tag2 = tag2;
		this.tag2Exists = true;

		this.tag3 = tag3;
		this.tag3Exists = true;

		this.tag4 = tag4;
		this.tag4Exists = true;

		this.tag5 = tag5;
		this.tag5Exists = true;

		this.tag6 = tag6;
		this.tag6Exists = true;
	}


}




public class PUGameObjectBase : PUObject {


	private static Type planetOverride = Type.GetType("PlanetUnityOverride");
	private static MethodInfo processStringMethod = planetOverride.GetMethod("processString", BindingFlags.Public | BindingFlags.Static);




	// XML Attributes
	public cRect bounds;
	public bool boundsExists;

	public bool hidden;
	public bool hiddenExists;

	public float lastY;
	public bool lastYExists;

	public float lastX;
	public bool lastXExists;

	public int renderQueueOffset;
	public bool renderQueueOffsetExists;

	public bool clipDepth;
	public bool clipDepthExists;

	public bool clipStencil;
	public bool clipStencilExists;




	
	public void SetBounds(cRect v) { bounds = v; boundsExists = true; } 
	public void SetHidden(bool v) { hidden = v; hiddenExists = true; } 
	public void SetLastY(float v) { lastY = v; lastYExists = true; } 
	public void SetLastX(float v) { lastX = v; lastXExists = true; } 
	public void SetRenderQueueOffset(int v) { renderQueueOffset = v; renderQueueOffsetExists = true; } 
	public void SetClipDepth(bool v) { clipDepth = v; clipDepthExists = true; } 
	public void SetClipStencil(bool v) { clipStencil = v; clipStencilExists = true; } 


	public override void gaxb_unload()
	{
		base.gaxb_unload();

	}
	
	public void gaxb_addToParent()
	{
		if(parent != null)
		{
			FieldInfo parentField = parent.GetType().GetField("GameObject");
			List<object> parentChildren = null;
			
			if(parentField != null)
			{
				parentField.SetValue(parent, this);
				
				parentField = parent.GetType().GetField("GameObjectExists");
				parentField.SetValue(parent, true);
			}
			else
			{
				parentField = parent.GetType().GetField("GameObjects");
				
				if(parentField != null)
				{
					parentChildren = (List<object>)(parentField.GetValue(parent));
				}
				else
				{
					parentField = parent.GetType().GetField("Objects");
					if(parentField != null)
					{
						parentChildren = (List<object>)(parentField.GetValue(parent));
					}
				}
				if(parentChildren == null)
				{
					FieldInfo childrenField = parent.GetType().GetField("children");
					if(childrenField != null)
					{
						parentChildren = (List<object>)childrenField.GetValue(parent);
					}
				}
				if(parentChildren != null)
				{
					parentChildren.Add(this);
				}
				
			}
		}
	}

	public override void gaxb_load(XmlReader reader, object _parent, Hashtable args)
	{
		base.gaxb_load(reader, _parent, args);

		if(reader == null && _parent == null)
			return;
		
		parent = _parent;
		
		if(this.GetType() == typeof( PUGameObject ))
		{
			gaxb_addToParent();
		}
		
		xmlns = reader.GetAttribute("xmlns");
		

		string attr;
		attr = reader.GetAttribute("bounds");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { bounds = attr; boundsExists = true; } 
		
		attr = reader.GetAttribute("hidden");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { hidden = bool.Parse(attr); hiddenExists = true; } 
		
		attr = reader.GetAttribute("lastY");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { lastY = float.Parse(attr); lastYExists = true; } 
		
		attr = reader.GetAttribute("lastX");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { lastX = float.Parse(attr); lastXExists = true; } 
		
		attr = reader.GetAttribute("renderQueueOffset");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr != null) { renderQueueOffset = int.Parse(attr); renderQueueOffsetExists = true; } 
		
		attr = reader.GetAttribute("clipDepth");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "false"; }
		if(attr != null) { clipDepth = bool.Parse(attr); clipDepthExists = true; } 
		
		attr = reader.GetAttribute("clipStencil");
		if(attr != null && planetOverride != null) { attr = processStringMethod.Invoke(null, new [] {_parent, attr}).ToString(); }
		if(attr == null) { attr = "false"; }
		if(attr != null) { clipStencil = bool.Parse(attr); clipStencilExists = true; } 
		

	}
	
	
	
	
	
	
	
	public override void gaxb_appendXMLAttributes(StringBuilder sb)
	{
		base.gaxb_appendXMLAttributes(sb);

		if(boundsExists) { sb.AppendFormat (" {0}=\"{1}\"", "bounds", bounds); }
		if(hiddenExists) { sb.AppendFormat (" {0}=\"{1}\"", "hidden", hidden.ToString().ToLower()); }
		if(lastYExists) { sb.AppendFormat (" {0}=\"{1}\"", "lastY", lastY.ToString ("0.##")); }
		if(lastXExists) { sb.AppendFormat (" {0}=\"{1}\"", "lastX", lastX.ToString ("0.##")); }
		if(renderQueueOffsetExists) { sb.AppendFormat (" {0}=\"{1}\"", "renderQueueOffset", renderQueueOffset); }
		if(clipDepthExists) { sb.AppendFormat (" {0}=\"{1}\"", "clipDepth", clipDepth.ToString().ToLower()); }
		if(clipStencilExists) { sb.AppendFormat (" {0}=\"{1}\"", "clipStencil", clipStencil.ToString().ToLower()); }

	}
	
	public override void gaxb_appendXMLSequences(StringBuilder sb)
	{
		base.gaxb_appendXMLSequences(sb);


	}
	
	public override void gaxb_appendXML(StringBuilder sb)
	{
		if(sb.Length == 0)
		{
			sb.AppendFormat ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		}
		
		sb.AppendFormat ("<{0}", "GameObject");
		
		if(xmlns != null)
		{
			sb.AppendFormat (" {0}=\"{1}\"", "xmlns", xmlns);
		}
		
		gaxb_appendXMLAttributes(sb);
		
		
		StringBuilder seq = new StringBuilder();
		seq.AppendFormat(" ");
		gaxb_appendXMLSequences(seq);
		
		if(seq.Length == 1)
		{
			sb.AppendFormat (" />");
		}
		else
		{
			sb.AppendFormat (">{0}</{1}>", seq.ToString(), "GameObject");
		}
	}
}
